/*
 * This file is generated by jOOQ.
 */
package org.jesse.passkey.dbaccess.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import org.jesse.passkey.dbaccess.Indexes;
import org.jesse.passkey.dbaccess.Jesse;
import org.jesse.passkey.dbaccess.Keys;
import org.jesse.passkey.dbaccess.tables.records.PasskeyDemoRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PasskeyDemo extends TableImpl<PasskeyDemoRecord> {

    private static final long serialVersionUID = 399947454;

    /**
     * The reference instance of <code>jesse.passkey_demo</code>
     */
    public static final PasskeyDemo PASSKEY_DEMO = new PasskeyDemo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PasskeyDemoRecord> getRecordType() {
        return PasskeyDemoRecord.class;
    }

    /**
     * The column <code>jesse.passkey_demo.cred_id</code>.
     */
    public final TableField<PasskeyDemoRecord, String> CRED_ID = createField(DSL.name("cred_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this,
        "");

    /**
     * The column <code>jesse.passkey_demo.user_handle</code>.
     */
    public final TableField<PasskeyDemoRecord, String> USER_HANDLE = createField(DSL.name("user_handle"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>jesse.passkey_demo.user_name</code>.
     */
    public final TableField<PasskeyDemoRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>jesse.passkey_demo.pub_key</code>.
     */
    public final TableField<PasskeyDemoRecord, String> PUB_KEY = createField(DSL.name("pub_key"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>jesse.passkey_demo.cred_type</code>.
     */
    public final TableField<PasskeyDemoRecord, String> CRED_TYPE = createField(DSL.name("cred_type"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>jesse.passkey_demo.transports</code>.
     */
    public final TableField<PasskeyDemoRecord, String> TRANSPORTS = createField(DSL.name("transports"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>jesse.passkey_demo.status</code>.
     */
    public final TableField<PasskeyDemoRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>jesse.passkey_demo.create_time</code>.
     */
    public final TableField<PasskeyDemoRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"),
        org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false)
            .defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>jesse.passkey_demo.update_time</code>.
     */
    public final TableField<PasskeyDemoRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"),
        org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false)
            .defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>jesse.passkey_demo</code> table reference
     */
    public PasskeyDemo() {
        this(DSL.name("passkey_demo"), null);
    }

    /**
     * Create an aliased <code>jesse.passkey_demo</code> table reference
     */
    public PasskeyDemo(String alias) {
        this(DSL.name(alias), PASSKEY_DEMO);
    }

    /**
     * Create an aliased <code>jesse.passkey_demo</code> table reference
     */
    public PasskeyDemo(Name alias) {
        this(alias, PASSKEY_DEMO);
    }

    private PasskeyDemo(Name alias, Table<PasskeyDemoRecord> aliased) {
        this(alias, aliased, null);
    }

    private PasskeyDemo(Name alias, Table<PasskeyDemoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PasskeyDemo(Table<O> child, ForeignKey<O, PasskeyDemoRecord> key) {
        super(child, key, PASSKEY_DEMO);
    }

    @Override
    public Schema getSchema() {
        return Jesse.JESSE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PASSKEY_DEMO_IDX_USER_HANDLE);
    }

    @Override
    public UniqueKey<PasskeyDemoRecord> getPrimaryKey() {
        return Keys.KEY_PASSKEY_DEMO_PRIMARY;
    }

    @Override
    public List<UniqueKey<PasskeyDemoRecord>> getKeys() {
        return Arrays.<UniqueKey<PasskeyDemoRecord>>asList(Keys.KEY_PASSKEY_DEMO_PRIMARY);
    }

    @Override
    public PasskeyDemo as(String alias) {
        return new PasskeyDemo(DSL.name(alias), this);
    }

    @Override
    public PasskeyDemo as(Name alias) {
        return new PasskeyDemo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PasskeyDemo rename(String name) {
        return new PasskeyDemo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PasskeyDemo rename(Name name) {
        return new PasskeyDemo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

}
